C51 COMPILER V9.01   USART1                                                                11/27/2017 15:22:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USART1
OBJECT MODULE PLACED IN .\list\USART1.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE USART1.C BROWSE DEBUG OBJECTEXTEND PRINT(.\list\USART1.lst) OBJECT(.\list\U
                    -SART1.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include "USART1.h"
  16          
  17          
  18          u8      idata DATA_FLAG=0;      //数据有效标志
  19          
  20          
  21          unsigned char UartGroup;                        //user define  ; 串口组号
  22          
  23          u8      idata GetRequest;       //读取请求标志
  24          
  25          COMx_Define     COM1;
  26          u8      idata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
  27          u8      idata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
  28          
  29          
  30          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  31          {
  32   1              u8      i;
  33   1              u32     j;
  34   1              
  35   1              if(UARTx == USART1)
  36   1              {
  37   2                      COM1.id = 1;
  38   2                      COM1.TX_read    = 0;
  39   2                      COM1.TX_write   = 0;
  40   2                      COM1.B_TX_busy  = 0;
  41   2                      COM1.RX_Cnt     = 0;
  42   2                      COM1.RX_TimeOut = 0;
  43   2                      COM1.B_RX_OK    = 0;
  44   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  45   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  46   2      
  47   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 1;       //模式错误
  48   2                      if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  49   2                      else                                                                    PS = 0; //低优先级中断
  50   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  51   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  52   2                      {
  53   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  54   3                              if(j >= 65536UL)        return 2;       //错误
C51 COMPILER V9.01   USART1                                                                11/27/2017 15:22:16 PAGE 2   

  55   3                              j = 65536UL - j;
  56   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
  57   3                              {
  58   4                                      TR1 = 0;
  59   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  60   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  61   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  62   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  63   4                                      TH1 = (u8)(j>>8);
  64   4                                      TL1 = (u8)j;
  65   4                                      ET1 = 0;        //禁止中断
  66   4                                      TMOD &= ~0x40;  //定时
  67   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  68   4                                      TR1  = 1;
  69   4                              }
  70   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  71   3                              {
  72   4                                      AUXR &= ~(1<<4);        //Timer stop
  73   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  74   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
  75   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
  76   4                                      TH2 = (u8)(j>>8);
  77   4                                      TL2 = (u8)j;
  78   4                                      IE2  &= ~(1<<2);        //禁止中断
  79   4                                      AUXR &= ~(1<<3);        //定时
  80   4                                      AUXR |=  (1<<4);        //Timer run enable
  81   4                              }
  82   3                              else return 2;  //错误
  83   3                      }
  84   2                      else if(COMx->UART_Mode == UART_ShiftRight)
  85   2                      {
  86   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  87   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  88   3                      }
  89   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  90   2                      {
  91   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  92   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  93   3                      }
  94   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  95   2                      else                                                            ES = 0; //禁止中断
  96   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  97   2                      else                                                            REN = 0;        //禁止接收
  98   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  99   2                      if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 100   2                      else                                                                    PCON2 &= ~(1<<4);
 101   2                      return  0;
 102   2              }
 103   1              return 3;       //其它错误
 104   1      }
 105          
 106          
 107          /*************** 装载串口发送缓冲 *******************************/
 108          
 109          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
 110          {
 111   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
 112   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
 113   1      
 114   1              if(COM1.B_TX_busy == 0)         //空闲
 115   1              {  
 116   2                      COM1.B_TX_busy = 1;             //标志忙
C51 COMPILER V9.01   USART1                                                                11/27/2017 15:22:16 PAGE 3   

 117   2                      TI = 1;                                 //触发发送中断
 118   2              }
 119   1      }
 120          
 121          void PrintString1(u8 *puts)
 122          {
 123   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 124   1      }
 125          
 126          
 127          
 128          /********************* UART1中断函数************************/
 129          void UART1_int (void) interrupt UART1_VECTOR
 130          {
 131   1                 if(RI)
 132   1                      {
 133   2                              RI = 0;
 134   2                              if(COM1.B_RX_OK == 0)
 135   2                              {
 136   3                                      if(DATA_FLAG) //数据有效
 137   3                                 {
 138   4                                              //RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 139   4                                              //if( COM1.RX_Cnt >= 5)
 140   4                                              if( (RX1_Buffer[COM1.RX_Cnt++] = SBUF) == 0xF7) 
 141   4                                              {
 142   5                                                      COM1.RX_Cnt = 2; 
 143   5                                                      DATA_FLAG=0; 
 144   5                                                      RX1_Buffer[0]=0;
 145   5                                                      if(RX1_Buffer[2]==(0xa0|myaddr) && RX1_Buffer[3]==0xF7)   
 146   5                                                      {
 147   6                                                              GetRequest = 1;         //读取请求标志位置位
 148   6                                                              /*
 149   6                                                              TX1_write2buff(0xF0);
 150   6                                                              TX1_write2buff(AVA_LiquidLevel);
 151   6                                                              TX1_write2buff(myaddr);//
 152   6                                                              TX1_write2buff(0);//
 153   6                                                              TX1_write2buff(FirstData);  //液面状态 0：未检测到页面 1；检测到液面
 154   6                                                              TX1_write2buff(0xF7);
 155   6                                                      */
 156   6      
 157   6                                                      }                                        
 158   5                                              }                               
 159   4                                 }
 160   3                                 else                         //数据无效
 161   3                                 {
 162   4                                              RX1_Buffer[1]=SBUF;
 163   4                                              if(RX1_Buffer[0]==0xF0 && RX1_Buffer[1]==AVA_Compass)
 164   4                                              {
 165   5                                                      COM1.RX_Cnt = 2;
 166   5                                                      DATA_FLAG = 1;
 167   5                                              }
 168   4                                              RX1_Buffer[0]=RX1_Buffer[1];
 169   4                                 }            
 170   3                              }
 171   2                      }
 172   1              
 173   1                      if(TI)
 174   1                      {
 175   2                              TI = 0;
 176   2                              if(COM1.TX_read != COM1.TX_write)
 177   2                              {
 178   3                                      SBUF = TX1_Buffer[COM1.TX_read];
C51 COMPILER V9.01   USART1                                                                11/27/2017 15:22:16 PAGE 4   

 179   3                                      if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 180   3                              }
 181   2                              else    COM1.B_TX_busy = 0;
 182   2                      }
 183   1      }
 184          
 185          
 186          
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    600    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       7
   IDATA SIZE       =     82    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
